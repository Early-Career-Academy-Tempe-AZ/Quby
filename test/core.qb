#<pre#
    if ( ! window.quby_core ) {
        window.quby_core = {
            daysOfTheWeek : [
                    'Sunday', 'Monday', 'Tuesday',
                    'Wednesday', 'Thursday', 'Friday', 'Saturday'
            ],
            
            ensureInt : function( v ) {
                if ( v == undefined ) {
                    return 0;
                } else {
                    return v | 0;
                }
            },
            
            functionToString : Function.prototype.toString
        };
    }
    
    function forBlock( min, max, step, block ) {
        if ( block ) {
            for ( var i = min; i < max; i += step ) {
                quby_callBlock( block, [i] );
            }
        } else {
            quby.runtime.missingBlockError();
        }
    }
    
    function forBlockDown( max, min, step, block ) {
        if ( block ) {
            for ( var i = max; i > min; i += step ) {
                quby_callBlock( block, [i] );
            }
        } else {
            quby.runtime.missingBlockError();
        }
    }
#>#

/**
 * Raises a runtime error using the message given.
 * A message explaining the error must always be given.
 * 
 * @param msg The message to display as the error.
 */
def error( msg )
    #<# quby.runtime.runtimeError( _var_msg ) #>#
end

class Object
    def is( klass )
        #<# var klassStr = _var_klass.toString().toLowerCase(); #>#
        #<# var thisStr  = quby.runtime.identifyObject( this ).toLowerCase() #>#
        
        return #<# thisStr === klassStr #>#
    end
/*
    // TODO, get &block working on funs
    // then test the methods below...
    def hasMethod( method )
        return this.has( method, 0 )
    end
    
    def hasMethod( method, length )
        #<# var methStr = quby.runtime.formatFun( _var_method, _var_length ) #>#
        return #<# this.methStr !== undefined #>#
    end
    
    def call( method, &block )
        return this.call( method, [] ) &block
    end
    
    def call( method, args, &block )
        #<#
            var callName = quby.runtime.formatFun( _var_method, _var_length )
            var fun = this[callName];
            
            if ( fun ) {
                quby.runtime.methodMissingError( obj, callName, _var_args, _var_block );
            } else {
                var callArgs;
                if ( args ) {
                    if ( args instanceof QubyArray ) {
                        var vals = _var_args.values;
                        callArgs = [];
                        
                        for (  var i = 0; i < vals.length; i++ ) {
                            callArgs[ callArgs.length ] = vals[i];
                        }
                        callArgs[ callArgs.length ] = _var_block;
                    } else {
                        callArgs = [ _var_args, _var_block ];
                    }
                } else {
                    callArgs = [ _var_block ];
                }
                
                return fun.apply( this, args );
            }
        #>#
    end
    
    def try( method, &block )
        return this.try( method, [] ) &block
    end
    
    def try( method, args, &block )
        if this.hasMethod( method, args.length() )
            return this.call( method, args ) &block
        else
            return null
        end
    end
*/
    def toString()
        // must run the prototype toString to avoid recursion
        return #<# quby.runtime.identifyObject(this) #>#
    end
    
    /*
     * Point JavaScript.toString to Quby.toString,
     * so overriding toString works when adding things together.
     */
    #def toString()
        return #<# this._fun_tostring_0() #>#
    end
    
    #def __noSuchMethod__(name, args)
        #<#
            var args = [];
            for ( var i = 0; i < _var_args.length-1; i++ ) {
                args.push( _var_args[i] );
            }
            var block = _var_args[ _var_args.length-1 ];
            
            quby.runtime.methodMissingError( this, _var_name, args, block );
        #>#
    end
end

class Time
    #def initialize()
        #<#
            var year   = quby_core.ensureInt( arguments[0] );
            var month  = quby_core.ensureInt( arguments[1] );
            var day    = quby_core.ensureInt( arguments[2] );
            var hour   = quby_core.ensureInt( arguments[3] );
            var minute = quby_core.ensureInt( arguments[4] );
            var second = quby_core.ensureInt( arguments[5] );
            var millis = quby_core.ensureInt( arguments[6] );
            
            if ( year < 100 ) {
                _this.time = new Date(    0, month, day, hour, minute, second, millis );
                _this.time.setFullYear( year );
            } else {
                _this.time = new Date( year, month, day, hour, minute, second, millis );
            }
        #>#
    end
    
    def new()
        #<# _this.time = new Date() #>#
    end
    
    def new( year, month, day )
        #<# _this.initialize( _var_year, _var_month, _var_day ) #>#
    end
    
    def new( year, month, day, hour, minutes, seconds )
        #<# _this.initialize( _var_year, _var_month, _var_day, _var_hour, _var_minutes, _var_seconds ) #>#
    end
    
    def new( year, month, day, hour, minutes, seconds, millis )
        #<# _this.initialize( _var_year, _var_month, _var_day, _var_hour, _var_minutes, _var_seconds, _var_millis ) #>#
    end
    
    def clone()
        return new Time(
                this.year(), this.month(), this.day(),
                this.hours(), this.minutes(), this.seconds(), this.milliseconds()
        )
    end
    
    def setDate( year, month, day )
        #<#
            _this.time.setFullYear( _var_year | 0 )
            _this.time.setMonth( _var_month | 0 )
            _this.time.setDate( _var_day | 0 )
        #>#
        
        return this
    end
    
    def setTime( hour, minute, second )
        return this.setTime( hour, minute, second, this.milliseconds() )
    end
    
    def setTime( hour, minute, second, milliseconds )
        #<#
            _this.time.setHours( _var_hour | 0 )
            _this.time.setMinutes( _var_minute | 0 )
            _this.time.setSeconds( _var_second | 0 )
            _this.time.setMilliseconds( _var_milliseconds | 0 )
        #>#
        
        return this
    end
    
    def setDateTime( year, month, day, hour, minute, second )
        this.setDate( year, month, day )
        
        return this.setTime( hour, minute, second )
    end
    
    def setDateTime( year, month, day, hour, minute, second, milliseconds )
        this.setDate( year, month, day )
        
        return this.setTime( hour, minute, second, milliseconds )
    end
    
    def year()
        return #<# _this.time.getFullYear() #>#
    end
    
    def month()
        return #<# _this.time.getMonth() #>#
    end
    
    def day()
        return #<# _this.time.getDate() #>#
    end
    
    def weekday()
        return #<# _this.time.getDay() #>#
    end
    
    def weekdayName()
        return #<# quby_core.daysOfTheWeek[ _this.time.getDay() ] #>#
    end
    
    def hours()
        return #<# _this.time.getHours() #>#
    end
    
    def minutes()
        return #<# _this.time.getMinutes() #>#
    end
    
    def seconds()
        return #<# _this.time.getSeconds() #>#
    end
    
    def milliseconds()
        return #<# _this.time.getMilliseconds() #>#
    end
    
    def toMilliseconds()
        return #<# _this.time.getTime() #>#
    end
    
    def toString()
        return #<# _this.time.toString() #>#
    end
end

class Number
    def times(step)
        if step > 0
            #<#
                forBlock( 0, this, _var_step, _q_block );
            #>#
        end
    end
    
    def clone()
        return this
    end
    
    def times()
        #<#
            forBlock( 0, this, 1, _q_block );
        #>#
    end
    
    def upTo(max)
        #<#
            forBlock( this, _var_max, 1, _q_block );
        #>#
    end
    
    def upTo(max, step)
        #<#
            forBlock( this, _var_max, _var_step, _q_block );
        #>#
    end
    
    def downTo(min)
        #<#
            forBlockDown( this, _var_min, -1, _q_block );
        #>#
    end
    
    def downTo(min, step)
        #<#
            forBlockDown( this, _var_min, _var_step, _q_block );
        #>#
    end

	def to(other)
		#<#
			if ( _var_other > this ) {
                forBlock( this, _var_other, 1, _q_block );
			} else {
                forBlockDown( this, _var_other, -1, _q_block );
			}
		#>#
	end

	def to(other, step)
		#<#
            _var_step = Math.abs( _var_step )
            
            if ( this < _var_other ) {
                forBlock( this, _var_other, _var_step, _q_block );
            } else {
                forBlockDown( this, _var_other, -_var_step, _q_block );
            }
		#>#
	end

	def limit( min, max )
		return #<# Math.max( _var_min, Math.min(this, _var_max) ) #>#
	end

	def max( other )
		return #<# Math.max( this, _var_other ) #>#
	end

	def min( other )
		return #<# Math.min( this, _var_other ) #>#
	end

	def sin()
		return #<# Math.sin( this ); #>#
	end

	def cos()
		return #<# Math.cos( this ); #>#
	end

	def tan()
		return #<# Math.tan( this ); #>#
	end

	def sqrt()
		return #<# Math.sqrt( this ); #>#
	end

	def square()
		return this*this
	end

	def cube()
		return this*this*this
	end

	def abs()
		return #<# Math.abs( this ); #>#
	end

	def acos()
		return #<# Math.acos( this ); #>#
	end

	def asin()
		return #<# Math.asin( this ); #>#
	end

	def atan()
		return #<# Math.atan( this ); #>#
	end

	def atan2( other )
		return #<# Math.atan2( this, _var_other ); #>#
	end

	def ceil()
		return #<# Math.ceil( this ); #>#
	end

	def exp()
		return #<# Math.exp( this ); #>#
	end

	def floor()
		return #<# Math.floor( this ); #>#
	end

	def log()
		return #<# Math.log( this ); #>#
	end

	def pow( other )
		return #<# Math.pow( this, _var_other ); #>#
	end

	def round()
		return #<# Math.round( this ) #>#
	end

	def toRadians()
		return #<# this * Math.PI/180.0 #>#
	end

	def toDegrees()
		return #<# this / (Math.PI/180.0) #>#
	end
    
    def toString()
        return #<# Object.prototype.toString.call( this ) #>#
    end
end

class Array
    def clone()
        #<#
            var arr = new QubyArray();
            arr.values = this.values.slice(0);
            return arr;
        #>#
    end
    
    def indexes()
        #<#
            var arr = new QubyArray();
            var len = this.values.length;
            
            for ( var i = 0; i < len; i++ ) {
                arr.values.push( i );
            }
            
            return arr;
        #>#
    end
    
    def indexes( element )
        #<#
            var indexes = new QubyArray();
            
            for (
                    var vs = this.values, i = 0;
                    i < vs.length;
                    i++
            ) {
                temp = this.values[i];
                if ( temp === _var_element ) {
                    indexes.values.push( i );
                }
            }
            
            return indexes
        #>#
    end
    
    def each()
        #<#
            for (
                    var vs = this.values, i = 0;
                    i < vs.length;
                    i++
            ) {
                quby_callBlock( _q_block, [ vs[i] ]);
            }
        #>#
        
        return this
    end
    
    def eachIndex()
        #<#
            for (
                    var vs = this.values, i = 0;
                    i < vs.length;
                    i++
            ) {
                quby_callBlock( _q_block, [ i ]);
            }
        #>#
        
        return this;
    end
    
    def eachMapping()
        #<#
            for (
                    var vs = this.values, i = 0;
                    i < vs.length;
                    i++
            ) {
                quby_callBlock( _q_block, [ i, vs[i] ]);
            }
        #>#
        
        return this
    end
    
    def unshift( val )
        #<# this.values.unshift( _var_val ) #>#
        return this
    end
    
    def shift()
        return #<# this.values.shift() #>#
    end
    
    def add( val )
        #<#
            var vs = this.values;
            vs[ vs.length ] = _var_val;
        #>#
        return this
    end
    
    def push( val )
        #<#
            var vs = this.values;
            vs[ vs.length ] = _var_val;
        #>#
        return this
    end
    
    def pop()
        if this.isEmpty()
            return null
        else
            return #<# this.values.pop() #>#
        end
    end
    
    def peek()
        if this.isEmpty()
            return null
        else
            return #<# this.values[ this.values.length-1 ] #>#
        end
    end
    
    def index( element )
        return this.index( element, 0 )
    end
    
    def index( element, from )
        index = #<# this.values.indexOf( _var_element, _var_from ) #>#
        
        if index != -1
            return index
        else
            return null
        end
    end
    
    def shuffle()
        clone = this.clone()
        #<# util.array.randomSort( _var_clone.values ) #>#
        return clone
    end
    
    def size()
        return #<# this.values.length #>#
    end
    
    def length()
        return #<# this.values.length #>#
    end
    
    def isEmpty()
        return #<# this.values.length == 0 #>#
    end
    
    def isSet( key )
        return key >= 0 && #<# _var_key < this.values.length #>#
    end
    
    def deleteAt( index )
        #<#
            var index = parseInt( _var_index );
            var len = this.values.length;
		
            if ( index < 0 ) {
                if ( -index > len ) {
                    return null;
                } else {
                    index = len+index;
                }
            } else if ( index >= len ) {
                return null;
            }
            
            var element = this.values[ index ];
            this.values.splice( index, 1 )
            
            return element;
        #>#
    end
    
    def deleteIf( &block )
        if block != null
            #<# var deletes = [] #>#
            
            this.eachMapping() do |index, element|
                if yield element
                    #<# deletes[ deletes.length ] = _var_index #>#
                end
            end
            
            #<#
                var deletesLen = deletes.length-1;
                for ( var i = deletesLen; i >= 0; i-- ) {
                    this.values.splice( deletes[i], 1 );
                }
            #>#
            
            return this
        else
            error( "No block supplied for Array.deleteIf" )
        end
    end
    
    def delete( element )
        #<#
            for (
                    var vs = this.values, i = 0, len = vs.length;
                    i < len;
                    i++
            ) {
                if ( vs[i] == _var_element ) {
                    vs.splice( i, 1 )
                    return true;
                }
            }
        #>#
        
        return false;
    end
    
    def map()
        mappedArr = []
        this.each() { |e| mappedArr.add( yield e ) }
        return mappedArr;
    end
    
    def filter()
        newArr = []
        this.each() do |e|
            if ( yield e )
                newArr.add( e )
            end
        end
        return newArr
    end
    
    def reverse()
        #<# this.values.reverse() #>#
        return this
    end
    
    def join()
        return #<# this.values.join() #>#
    end
    
    def join( seperator )
        return #<# this.values.join(_var_seperator) #>#
    end
    
    def toString()
        return '[' + this.join(', ') + ']'
    end
end

class Hash
	def clone()
		#<# return this.clone() #>#
	end
	
	def each( &block )
		if block == null
			#<# quby.runtime.missingBlockError() #>#
		else if block.arity() >= 2
			#<#
				this.each( _var_block );
			#>#
		else
			#<#
				this.each( function(key, val) {
					_var_block( val );
				} );
			#>#
		end
	end
	
	def keys()
		#<#
			var arr = new QubyArray();
			this.each( function(key, val) {
				arr.values.push( key );
			} );
            return arr;
		#>#
	end
	
	def values()
		#<#
			var arr = new QubyArray();
			this.each( function(key, val) {
				arr.values.push( val );
			} );
            return arr;
		#>#
	end
    
    def filter( &block )
        if block == null
            error( "Do-block expected" )
        end
        
        newHash = {}
        
        this.each() do |k, e|
            if block.arity() >= 2
                if ( yield k, e )
                    newHash[k] = e
                end
            else if ( yield e )
                newHash[k] = e
            end
        end
        
        return newHash
    end
    
    def contains( key )
        return #<# this.contains( _var_key ) #>#
    end
    
    def delete( key )
        return #<# this.remove( _var_key ) #>#
    end
end

class String
    def each( &block )
        if ( block != null && block.arity() > 0 )
            #<#
                var strLen = this.length;
                for ( var i = 0; i < strLen; i++ ) {
                    quby_callBlock(
                            _var_block,
                            [ this.charAt(i) ]
                    );
                }
            #>#
        end
        
        return this
    end
    
    def clone()
        return this
    end
    
	def getChar( index )
        len = this.length()
        if ( index < 0 )
            if ( -index > len )
                return null
            else
                index = len+index
            end
        else if index >= len
            return null
        end
        
		return #<# this.charAt( _var_index ) #>#
	end

	def length()
		return #<# this.length #>#
	end

	def toLowerCase()
		return #<# this.toLowerCase() #>#
	end

	def toUpperCase()
		return #<# this.toUpperCase() #>#
	end

	def indexOf( chr )
		return #<# this.indexOf( _var_chr ) #>#
	end
    
    /*
     * Needed to stop recursive calls to toString.
     */
    def toString()
        return this
    end
    
    /*
     * Needed to stop recursive calls to toString.
     */
    #def toString()
        return this
    end
end

class Function
    def clone()
        return this
    end
    
    /**
     * Cals this function with no parameters given.
     * 
     * @return The result of calling this function.
     */
    def call()
        this.call( null )
    end
    
    /**
     * Calls this function with the parameters given. The given parameters should
     * be contained within an array, or null for no arguments.
     * 
     * @param params An array containing the parameters to pass in, or null for no parameters.
     * @return The result of calling this function.
     */
    def call( params )
        arity = #<# this._fun_arity_0() #>#
        
        // See if we can skip making an empty array, if one isn't given and no parameters are needed.
        
        // Note that with the below statement it's possible to pass in an empty
        // array and have the function set it to a new empty array.
        // This occurres if the function needs more then 0 parameters, so it
        // doesn't really matter since we'll error anyway.
        if (params == null || #<# !_var_params.values #># || #<# _var_params.values.length == 0 #># )
            if arity == 0
                return #<# this.apply( this, null ) #>#
            else
                params = []
            end
        end
        
        if params.length() < arity
            #<#
                quby.runtime.notEnoughBlockParametersError(
                        this._fun_arity_0(),
                        _var_params._fun_length_0(),
                        'function'
                );
            #>#
        end
        
        return #<# this.apply( this, _var_params.values ) #>#
    end
    
    /**
     * @return The number of parameters expected by this function.
     */
    def arity()
        return #<# this.length #>#
    end
    
    def toString()
        return #<# quby_core.functionToString.call( this ) #>#
    end
end

class Proc
    def new( &block )
        if block == null
            error( "Block expected when creating new Proc" )
        else
            @block = block
        end
    end
    
    def clone()
        return this
    end
    
    def call()
        this.call( null )
    end
    
    def call( params )
        return @block.call( params )
    end
    
    def arity()
        return @block.length()
    end
    
    def toString()
        return 'Proc'
    end
end

def rand()
    return #<# Math.random() #>#
end

def rand(max)
    return rand(0, max)
end

def rand(min, max)
    return min + (max-min)*rand()
end

def randBoolean()
    return rand() > 0.5
end

def randBoolean( chance )
    return #<# parseInt( _fun_rand_1(_var_chance) ) == 0 #>#
end

def getTime()
    return #<# (new Date()).getTime() #>#
end

